// Generated by CoffeeScript 1.12.4
(function() {
  "strict mode";
  var jq;

  jq = jQuery.noConflict();

  jq.fn.disable = function() {
    return this.each(function() {
      return jq(this).prop('disabled', false);
    });
  };

  jq.fn.enable = function() {
    return this.each(function() {
      return jq(this).prop('disabled', false);
    });
  };

  jq(document).ready(function($) {
    var assignmentId, auxToolName, clearSegmentation, clearSegmentationBlock, confirmationBlocks, csrfSafeMethod, curKey, currCsrfToken, currSessionId, eraseMode, errorBlock, fixateClippingPlane, getCookie, loadingBlock, noAssignmentsBlock, noRankingBlock, onSessionLoadingDone, onSessionLoadingFail, rank, rankingBlock, redoButton, resetView, saveAssignment, saveConfirmationBlock, selectAddTool, selectAuxTool, selectDelTool, selectExtendTool, selectHandTool, selectMergeTool, selectSplitTool, selectStrokeTool, sessionBlock, setClippingPlaneXY, setClippingPlaneYZ, setClippingPlaneZX, setupSessionCtrls, setupTileEditor, setupWatershedTool, showBlock, showScribbles, showSegmentation, skipAssignment, skipConfirmationBlock, tileEditor, tileEditorCanvas, undoButton, updateSession, updateToolIcon, updateViewIcon, useAuxToolBlock, view2DBorder, view2DLabel, view3DBorder, view3DMeshes, workerRanking, workerScore, workerStats, zoomIn, zoomOut;
    loadingBlock = $('#loadingBlock');
    errorBlock = $('#errorBlock');
    noAssignmentsBlock = $('#noAssignmentsBlock');
    sessionBlock = $('#sessionBlock');
    assignmentId = $('#assignmentId');
    tileEditorCanvas = $('#sessionBlock canvas');
    showSegmentation = $('#showSegmentation');
    undoButton = $('#undo');
    redoButton = $('#redo');
    clearSegmentation = $('#clearSegmentation');
    resetView = $('#resetView');
    zoomOut = $('#zoomOut');
    zoomIn = $('#zoomIn');
    selectAddTool = $('#selectAddTool');
    selectDelTool = $('#selectDelTool');
    selectStrokeTool = $('#selectStrokeTool');
    selectHandTool = $('#selectHandTool');
    selectMergeTool = $('#selectMergeTool');
    selectExtendTool = $('#selectExtendTool');
    selectSplitTool = $('#selectSplitTool');
    showScribbles = $('#showScribbles');
    selectAuxTool = $('#selectAuxTool');
    auxToolName = $('#auxToolName');
    eraseMode = $('#eraseMode');
    skipAssignment = $('#skipAssignment');
    skipConfirmationBlock = $('#skipConfirmationBlock');
    saveAssignment = $('#saveAssignment');
    saveConfirmationBlock = $('#saveConfirmationBlock');
    clearSegmentationBlock = $('#clearSegmentationBlock');
    useAuxToolBlock = $('#useAuxToolBlock');
    confirmationBlocks = $('.confirmationBlock');
    workerStats = $('#workerStats');
    workerScore = $('#workerScore');
    workerRanking = $('#workerRanking');
    rankingBlock = $('#rankingBlock');
    rankingBlock.hide();
    rank = $('#rank');
    noRankingBlock = $('#noRankingBlock');
    noRankingBlock.hide();
    view3DBorder = $('#view3DBorder');
    view3DMeshes = $('#view3DMeshes');
    view2DBorder = $('#view2DBorder');
    view2DLabel = $('#view2DLabel');
    fixateClippingPlane = $('#fixateClippingPlane');
    setClippingPlaneXY = $('#setClippingPlaneXY');
    setClippingPlaneZX = $('#setClippingPlaneZX');
    setClippingPlaneYZ = $('#setClippingPlaneYZ');
    curKey = null;
    tileEditor = {
      selectedTool: null,
      previousOverlay: null
    };
    currSessionId = void 0;
    currCsrfToken = void 0;
    csrfSafeMethod = function(method) {
      return /^(GET|HEAD|OPTIONS|TRACE)$/.test(method);
    };
    getCookie = function(name) {
      var cookie, cookieValue, cookies, i;
      cookieValue = null;
      if (document.cookie && document.cookie !== '') {
        cookies = document.cookie.split(';');
        i = 0;
        while (i < cookies.length) {
          cookie = jQuery.trim(cookies[i]);
          if (cookie.substring(0, name.length + 1) === name + '=') {
            cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
            break;
          }
          i++;
        }
      }
      return cookieValue;
    };
    showSegmentation.click(function() {
      console.log('overlay', tileEditor.previousOverlay, guiParams.overlay);
      if (tileEditor.previousOverlay !== null && guiParams.overlay === NO_OVERLAY) {
        console.log('here');
        guiParams.overlay = tileEditor.previousOverlay;
      } else {
        tileEditor.previousOverlay = guiParams.overlay;
        guiParams.overlay = NO_OVERLAY;
      }
      console.log('overlay2', tileEditor.previousOverlay, guiParams.overlay);
      changeOverlay(guiParams.overlay);
      return updateViewIcon();
    });
    showScribbles.click(function() {
      guiParams.showScribbles = !guiParams.showScribbles;
      return updateViewIcon();
    });
    view3DBorder.click(function() {
      guiParams.overlay = BORDER_MESH_OVERLAY;
      changeOverlay(guiParams.overlay);
      return updateViewIcon();
    });
    view3DMeshes.click(function() {
      guiParams.overlay = LABEL_MESH_OVERLAY;
      changeOverlay(guiParams.overlay);
      return updateViewIcon();
    });
    view2DBorder.click(function() {
      guiParams.overlay = BORDER_OVERLAY;
      changeOverlay(guiParams.overlay);
      return updateViewIcon();
    });
    view2DLabel.click(function() {
      guiParams.overlay = LABEL_OVERLAY;
      changeOverlay(guiParams.overlay);
      return updateViewIcon();
    });
    fixateClippingPlane.click(function() {
      guiParams.fixateClippingPlane = !guiParams.fixateClippingPlane;
      return updateViewIcon();
    });
    setClippingPlaneXY.click(function() {
      guiParams.fixateClippingPlane = false;
      coseGUI.changeOrthogonalCameraView(XY_PLANE);
      guiParams.fixateClippingPlane = true;
      return updateViewIcon();
    });
    setClippingPlaneZX.click(function() {
      guiParams.fixateClippingPlane = false;
      coseGUI.changeOrthogonalCameraView(XZ_PLANE);
      guiParams.fixateClippingPlane = true;
      return updateViewIcon();
    });
    setClippingPlaneYZ.click(function() {
      guiParams.fixateClippingPlane = false;
      coseGUI.changeOrthogonalCameraView(YZ_PLANE);
      guiParams.fixateClippingPlane = true;
      return updateViewIcon();
    });
    setupWatershedTool = function() {
      return updateToolIcon();
    };
    selectAddTool.click(function() {
      guiParams.operations = SCRIBBLE_MANAGER_MODE_ADD;
      scribbleManager.stopModes();
      scribbleManager.setMode(guiParams.operations);
      tileEditor.selectedTool = selectAddTool;
      return updateToolIcon();
    });
    selectDelTool.click(function() {
      guiParams.operations = SCRIBBLE_MANAGER_MODE_DEL;
      scribbleManager.stopModes();
      scribbleManager.setMode(guiParams.operations);
      tileEditor.selectedTool = selectDelTool;
      return updateToolIcon();
    });
    selectMergeTool.click(function() {
      guiParams.operations = SCRIBBLE_MANAGER_MODE_MERGE;
      scribbleManager.stopModes();
      scribbleManager.setMode(guiParams.operations);
      tileEditor.selectedTool = selectMergeTool;
      return updateToolIcon();
    });
    selectSplitTool.click(function() {
      guiParams.operations = SCRIBBLE_MANAGER_MODE_SPLIT;
      scribbleManager.stopModes();
      scribbleManager.setMode(guiParams.operations);
      tileEditor.selectedTool = selectSplitTool;
      return updateToolIcon();
    });
    selectExtendTool.click(function() {
      guiParams.operations = SCRIBBLE_MANAGER_MODE_EXTEND;
      scribbleManager.stopModes();
      scribbleManager.setMode(guiParams.operations);
      tileEditor.selectedTool = selectExtendTool;
      return updateToolIcon();
    });
    undoButton.click(function() {
      return undo();
    });
    redoButton.click(function() {
      return redo();
    });
    clearSegmentation.click(function() {
      resetDelineation();
      return clearHandlers();
    });
    setupTileEditor = function() {
      setupWatershedTool();
      return updateViewIcon();
    };
    showBlock = function(block) {
      var b, blocks, l;
      loadingBlock.hide();
      blocks = {
        'error': errorBlock,
        'noAssignments': noAssignmentsBlock,
        'session': sessionBlock
      };
      for (l in blocks) {
        b = blocks[l];
        if (l !== block) {
          b.hide();
        }
      }
      return blocks[block].show();
    };
    updateToolIcon = function() {
      var j, len, selectedTool, tool, toolsButtons;
      toolsButtons = [selectAddTool, selectDelTool, selectSplitTool, selectMergeTool, selectExtendTool];
      for (j = 0, len = toolsButtons.length; j < len; j++) {
        tool = toolsButtons[j];
        tool.removeClass('icon_button_selected');
      }
      selectedTool = tileEditor.selectedTool;
      if (selectedTool === null) {
        return selectAddTool.addClass('icon_button_selected');
      } else {
        return selectedTool.addClass('icon_button_selected');
      }
    };
    updateViewIcon = function() {
      var j, len, view, viewButtons;
      if (!optimize_for_mobile) {
        viewButtons = [view2DBorder, view2DLabel, view3DBorder, view3DMeshes, showScribbles, showSegmentation];
        view2DBorder.show();
        view2DLabel.show();
      } else {
        view2DBorder.hide();
        view2DLabel.hide();
        viewButtons = [view3DBorder, view3DMeshes, showScribbles, showSegmentation];
      }
      for (j = 0, len = viewButtons.length; j < len; j++) {
        view = viewButtons[j];
        view.removeClass('icon_button_selected');
      }
      if (guiParams.overlay === BORDER_MESH_OVERLAY) {
        view3DBorder.addClass('icon_button_selected');
      } else if (guiParams.overlay === LABEL_MESH_OVERLAY) {
        view3DMeshes.addClass('icon_button_selected');
      } else if (guiParams.overlay === BORDER_OVERLAY) {
        view2DBorder.addClass('icon_button_selected');
      } else if (guiParams.overlay === LABEL_OVERLAY) {
        view2DLabel.addClass('icon_button_selected');
      }
      if (guiParams.showScribbles) {
        showScribbles.addClass('icon_button_selected');
      }
      if (guiParams.overlay !== NO_OVERLAY) {
        showSegmentation.addClass('icon_button_selected');
      }
      if (guiParams.fixateClippingPlane) {
        return fixateClippingPlane.addClass('icon_button_selected');
      } else {
        return fixateClippingPlane.removeClass('icon_button_selected');
      }
    };
    $(this).ajaxStart(function() {
      loadingBlock.show();
      currCsrfToken = getCookie('csrftoken');
      currSessionId = void 0;
      sessionBlock.children().disable();
      initWebGL();
      initCose3D();
      return animate();
    });
    onSessionLoadingDone = function(data) {
      var info;
      if (data.sessionId == null) {
        showBlock('noAssignments');
        return;
      }
      currSessionId = data.sessionId;
      assignmentId.text(data.assignmentId);
      setupTileEditor();
      info = {
        key: 'image',
        filename: data.tileUrl,
        xsize: data.tile_xsize,
        ysize: data.tile_ysize,
        zsize: data.tile_zsize,
        context_border: data.tileBorder,
        label: data.preSegUrl != null ? data.preSegUrl : void 0,
        grad: data.gradUrl != null ? data.gradUrl : void 0,
        seeds: data.initialSeedsUrl != null ? data.initialSeedsUrl : void 0
      };
      $('#container').empty();
      createAvailableImagesFromInfo(info.key);
      loadImage(info);
      curKey = info.key;
      return showBlock('session');
    };
    onSessionLoadingFail = function() {
      currSessionId = void 0;
      currCsrfToken = void 0;
      console.log('Error');
      return showBlock('error');
    };
    updateSession = function(action) {
      var data;
      if (action == null) {
        action = 'save';
      }
      currentImageIdx++;
      initWebGL();
      initCose3D();
      animate();
      if (currentImageIdx < imgInfo.images.length) {
        data = {
          sessionId: 0,
          assignmentId: 0,
          tileUrl: imgInfo.images[currentImageIdx].filename,
          tile_xsize: imgInfo.images[currentImageIdx].xsize,
          tile_ysize: imgInfo.images[currentImageIdx].ysize,
          tile_zsize: imgInfo.images[currentImageIdx].zsize,
          tile_border: imgInfo.images[currentImageIdx].border != null ? imgInfo.images[currentImageIdx].border : 0,
          preSegUrl: imgInfo.images[currentImageIdx].label != null ? imgInfo.images[currentImageIdx].label : void 0,
          gradUrl: imgInfo.images[currentImageIdx].grad != null ? imgInfo.images[currentImageIdx].grad : void 0,
          initialSeedsUrl: imgInfo.images[currentImageIdx].seeds != null ? imgInfo.images[currentImageIdx].seeds : void 0
        };
        return onSessionLoadingDone(data);
      } else {
        return onSessionLoadingFail();
      }
    };
    setupSessionCtrls = function() {
      confirmationBlocks.dialog({
        autoOpen: false,
        resizable: false,
        modal: true,
        open: function() {
          return $(this).parent().find('button:last-child').focus();
        },
        buttons: {
          'Confirm': function() {
            return updateSession($(this).dialog('close').data('action'));
          },
          Cancel: function() {
            return $(this).dialog('close');
          }
        }
      });
      skipAssignment.click(function() {
        return skipConfirmationBlock.dialog('open');
      });
      return saveAssignment.click(function() {
        return saveConfirmationBlock.dialog('open');
      });
    };
    setupSessionCtrls();
    return loadImageInfo(updateSession);
  });

}).call(this);
